Перем
КонтрагентОзон,
ПокупательОзон,
ДатаНачала,
ДатаОкончания;

#Область ОбработчикиКомандФормы

//Добавить обработку ошибок при возврате ошибки
Процедура ЗагрузитьВсеЗаказыOZON() Экспорт
	
	Если КонтрагентОзон = Справочники.Контрагенты.ПустаяСсылка()
		ИЛИ ПокупательОзон = Справочники.Покупатели.ПустаяСсылка() Тогда
		Сообщить("Перед работой с заказами в базе должны быть созданы контрагент и покупатель с именем OZON");
	КонецЕсли;
	
	ТочноеВремя_Начало = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	ОценкаПроизводительностиКлиентСервер.ЖурналироватьНачалоСобытия(Справочники.КлючевыеОперации.Заказы_Booking, ТочноеВремя_Начало); // <- Ализар 26.09.2017
	
	
	//ЗаполнитьСоответствияСтатусов();
	
	ЗаказыЗагружены = Ложь;
	Оффсет = 0;
	Лимит = 50;
	
	ЭтоРабочаяБаза = ОбщегоНазначения.ТекущаяБазаДанныхЯвляетсяРабочей();
	
	Пока НЕ ЗаказыЗагружены цикл
		Если ТестовыйЗапуск Тогда
			Если Оффсет = 350 Тогда
				ЗаказыЗагружены = Истина;
				Сообщить("В тестовых целях были загружены только первые 350 заказов, начиная с даты " + ДатаНачала);
			КонецЕсли;
		КонецЕсли;
		
		Ресурс = "/v2/posting/fbs/list";
		ТелоЗапроса = ПолучитьТекстЗапросаЗаказовOZON(ДатаНачала, ДатаОкончания, Лимит, Оффсет);
		Данные = ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса);
		
		
		Если Данные.result.Количество() = 0 Тогда
			ЗаказыЗагружены = Истина;
		КонецЕсли;
		
		Для каждого ДанныеЗаказа из Данные.result цикл
			СопоставитьИЗаписатьЗаказы(ДатаНачала, ДатаОкончания, ДанныеЗаказа);
		КонецЦикла;
		
		Оффсет = Оффсет + лимит;
		
	КонецЦикла;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.Заказы_Booking, ТочноеВремя_Начало); // <- Ализар 26.09.2017
	
КонецПроцедуры

Процедура ЗагрузитьВсеНеобработанныеЗаказыOZON() Экспорт
	
	Если КонтрагентОзон = Справочники.Контрагенты.ПустаяСсылка()
		ИЛИ ПокупательОзон = Справочники.Покупатели.ПустаяСсылка() Тогда
		Сообщить("Перед работой с заказами в базе должны быть созданы контрагент и покупатель с именем OZON");
	КонецЕсли;
	
	ТочноеВремя_Начало = ОценкаПроизводительностиКлиентСервер.ЗначениеТаймера();
	ОценкаПроизводительностиКлиентСервер.ЖурналироватьНачалоСобытия(Справочники.КлючевыеОперации.Заказы_Booking, ТочноеВремя_Начало); // <- Ализар 26.09.2017
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	
	ЗаказыЗагружены = Ложь;
	Оффсет = 0;
	Лимит = 50;
	
	Пока НЕ ЗаказыЗагружены цикл
		Если ТестовыйЗапуск Тогда
			Если Оффсет = 350 Тогда
				ЗаказыЗагружены = Истина;
				Сообщить("В тестовых целях были загружены только первые 350 заказов, начиная с даты " + ДатаНачала);
			КонецЕсли;
		КонецЕсли;
		
		Ресурс = "/v2/posting/fbs/unfulfilled/list";
		ТелоЗапроса = ПолучитьТекстЗапросаНеобработанныхЗаказовOZON(ДатаНачала, ДатаОкончания, Лимит, Оффсет);
		Данные = ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса);
		
		Если Данные <> Неопределено Тогда
			Для каждого ДанныеЗаказа из Данные.result цикл
				СопоставитьИЗаписатьЗаказы(ДатаНачала, ДатаОкончания, ДанныеЗаказа);
			КонецЦикла;
		КонецЕсли;
		
		Оффсет = Оффсет + лимит;
		
	КонецЦикла;
	
	ОценкаПроизводительностиКлиентСервер.ЗакончитьЗамерВремени(Справочники.КлючевыеОперации.Заказы_Booking, ТочноеВремя_Начало); // <- Ализар 26.09.2017
	
КонецПроцедуры

Процедура ПолучитьИнформациюОбОтправленииСOZON(ЗаказПокупателя) Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Получить("Host"));
	
	ТелоЗапроса = ПолучитьТекстЗапросаИнформацииПоОтправлениюOZON(ЗаказПокупателя);
	Ресурс = "/v2/posting/fbs/get";
	Данные = ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса, "ПолучитьИнформациюОбОтправленииСOZON");
	Если Данные <> Неопределено Тогда
		СопоставитьИЗаписатьЗаказы(ДатаНачала, ДатаОкончания, Данные.result);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьСборкуЗаказаСOZON(ЗаказПокупателя) Экспорт
	
	ПолучитьИнформациюОбОтправленииСOZON(ЗаказПокупателя);
	
	ТекущийСтатус = ПолучитьТекущийСтатусЗаказаOZON(ЗаказПокупателя);
	Если ТекущийСтатус = "awaiting_packaging" Тогда
		ВыполнитьСборкуОжидающихСборкуOZON(ЗаказПокупателя);
	ИначеЕсли ТекущийСтатус = "arbitration" Тогда
		ВыполнитьСборкуСпорныхЗаказовOZON(ЗаказПокупателя);
	Иначе
		ТекстСообщения = "Сборка заказов может осуществлять только из статусов ""Ожидает сборки"" или ""Ожидает решения спора""";
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
	ПолучитьИнформациюОбОтправленииСOZON(ЗаказПокупателя);
	
КонецПроцедуры

Процедура ВыполнитьСборкуОжидающихСборкуOZON(ЗаказПокупателя)
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Получить("Host"));
	
	ТелоЗапроса = ПолучитьТекстЗапросаСборкиЗаказаOZON(ЗаказПокупателя);
	Ресурс = "/v2/posting/fbs/ship";
	Данные = ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса, "ВыполнитьСборкуOZON");
	
КонецПроцедуры

Процедура ВыполнитьСборкуСпорныхЗаказовOZON(ЗаказПокупателя)
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Получить("Host"));
	
	ТелоЗапроса = ПолучитьТекстЗапросаСборкиСпорныхЗаказовСOZON(ЗаказПокупателя);
	Ресурс = "/v2/posting/fbs/awaiting-delivery";
	Данные = ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса, "ВыполнитьСборкуOZON");
	
КонецПроцедуры

Процедура ОткрытьСпорПоОтправлениюСOZON(ЗаказПокупателя) Экспорт
	
	ПолучитьИнформациюОбОтправленииСOZON(ЗаказПокупателя);
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Получить("Host"));
	
	ТелоЗапроса = ПолучитьТекстЗапросаОткрытьСпорПоОтправлениюСOZON(ЗаказПокупателя);
	Ресурс = "/v2/posting/fbs/arbitration";
	Данные = ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса, "ОткрытьСпорПоОтправлениюСOZON");
	
	ПолучитьИнформациюОбОтправленииСOZON(ЗаказПокупателя);
	
КонецПроцедуры

Функция НапечататьМаркировкуЗаказаСOZON(ЗаказПокупателя) Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Получить("Host"));
	
	ТелоЗапроса = ПолучитьТекстЗапросаПечатиМаркировкиЗаказаOZON(ЗаказПокупателя);
	ФайлРезультата = ПолучитьИмяВременногоФайла(".pdf");
	Если ПустаяСтрока(ТелоЗапроса) Тогда
		Сообщить("Не найден номер отправления по текущему заказу. Возможно этот заказ был создан вручную, а не загружен с OZON");
		Возврат неопределено;
	КонецЕсли;
	
	Ресурс = "/v2/posting/fbs/package-label";
	Запрос = Новый HTTPЗапрос(Ресурс, ПараметрыПодключения);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	ТекстОтвета = Соединение.ОтправитьДляОбработки(Запрос, ФайлРезультата);
	Если ЕстьОшибкаПриОбработке(ТекстОтвета) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ФайлРезультата);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

Процедура ВыполнитьОтменуЗаказаOZON(ЗаказПокупателя, КодОтмены, ПричинаОтмены = "") Экспорт
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Получить("Host"));
	
	ТелоЗапроса = ПолучитьТекстЗапросаОтменыЗаказаOZON(ЗаказПокупателя, КодОтмены, ПричинаОтмены);
	Ресурс = "/v2/posting/fbs/cancel";
	Данные = ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса);
	
	ПолучитьИнформациюОбОтправленииСOZON(ЗаказПокупателя);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовДляAPI_OZON

Функция ПолучитьТекстЗапросаЗаказовOZON(ДатаНачала, ДатаОкончания, Лимит, Оффсет);
	
	ДатаНачалаСтрокой = Формат(ДатаНачала, "ДФ=yyyy-MM-dd");
	ДатаОкончанияСтрокой = Формат(ДатаОкончания, "ДФ=yyyy-MM-dd");
	
	ТекстJSON = "{
		| ""dir"": ""asc"",
		| ""filter"": {
		|   ""since"": """ + ДатаНачалаСтрокой + "T00:00:00.126Z"",
		//|   ""status"": ""delivering"",
		|   ""to"": """ + ДатаОкончанияСтрокой + "T23:59:59.126Z""
		| },
		| ""limit"": " + Лимит + ",
		| ""offset"": " + Оффсет + "
		//| ""with"": {
		//|   ""order_number"": ""07322878-0011""
		//| }
		|}";
	
	Возврат ТекстJSON;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  ЗаказПокупателя  - ДокументСсылка.ЗаказПокупател - по заказу получаем номер отправления
// Возвращаемое значение:
//   ТекстВФорматеJSON   - Этот текст передаем в API OZON
//
Функция ПолучитьТекстЗапросаИнформацииПоОтправлениюOZON(ЗаказПокупателя)
	
	//В OZON предполагается что заказ может дробиться на несколько отправлений
	//В нашем случае это пока не предусмотрено
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	OZON_ДанныеПоЗаказам.posting_number КАК posting_number
		|ИЗ
		|	РегистрСведений.OZON_ДанныеПоЗаказам КАК OZON_ДанныеПоЗаказам
		|ГДЕ
		|	OZON_ДанныеПоЗаказам.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ТелоЗапроса =
			"{
			|""posting_number"": """ + РезультатЗапроса.posting_number + """
			|}";
	Иначе
		ТелоЗапроса = "";
	КонецЕсли;
	
	Возврат ТелоЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацииПоОтправлению(ЗаказПокупател)

Функция ПолучитьТекстЗапросаНеобработанныхЗаказовOZON(ДатаНачала, ДатаОкончания, Лимит, Оффсет);
	
	ДатаНачалаСтрокой = Формат(ДатаНачала, "ДФ=yyyy-MM-dd");
	ДатаОкончанияСтрокой = Формат(ДатаОкончания, "ДФ=yyyy-MM-dd");
	
	ТекстJSON = "{
		| ""dir"": ""asc"",
		| ""limit"": " + Лимит + ",
		| ""offset"": " + Оффсет + ",
		| ""status"": [
		|    ""awaiting_deliver"",
		|    ""awaiting_packaging"",
		|    ""not_accepted""
		|]
		|}";
	
	Возврат ТекстJSON;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  ЗаказПокупателя  - ДокументСсылка.ЗаказПокупател - по заказу получаем номер отправления
// Возвращаемое значение:
//   ТекстВФорматеJSON   - Этот текст передаем в API OZON
//
Функция ПолучитьТекстЗапросаСборкиЗаказаOZON(ЗаказПокупателя)
	
	//В OZON предполагается что заказ может дробиться на несколько отправлений
	//В нашем случае это пока не предусмотрено
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	OZON_ДанныеПоЗаказам.posting_number КАК posting_number,
		|	OZON_ДанныеПоЗаказам.sku КАК sku,
		|	OZON_ДанныеПоЗаказам.quantity КАК quantity
		|ИЗ
		|	РегистрСведений.OZON_ДанныеПоЗаказам КАК OZON_ДанныеПоЗаказам
		|ГДЕ
		|	OZON_ДанныеПоЗаказам.ЗаказПокупателя = &ЗаказПокупателя
		|	И OZON_ДанныеПоЗаказам.status = ""awaiting_packaging""
		|ИТОГИ ПО
		|	posting_number";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	ТелоЗапроса = "";
	ВыборкаПоОтправлениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОтправлениям.Следующий() цикл
		ТелоЗапроса =
			"{
			|    ""packages"": [
			|        {
			|        ""items"": [";
		
		КоличествоТоваров = 0;
		ВыборкаПоТоварам = ВыборкаПоОтправлениям.Выбрать();
		Пока ВыборкаПоТоварам.Следующий() цикл
			ТелоЗапроса = ТелоЗапроса +
				"			{
				|                ""quantity"": " + ВыборкаПоТоварам.quantity + ",
				|                ""sku"": " + СтрЗаменить(ВыборкаПоТоварам.sku, " ", "") + "
				|            }";
			
			Если КоличествоТоваров > 1 Тогда
				ТелоЗапроса = ТелоЗапроса + "," + символы.ПС;
			КонецЕсли;
			
			КоличествоТоваров = КоличествоТоваров + 1;
			
		КонецЦикла;
		ТелоЗапроса = ТелоЗапроса +
			"        ]
			|        }
			|    ],
			|    ""posting_number"": """ + ВыборкаПоОтправлениям.posting_number + """
			|}";
	КонецЦикла;
	
	Возврат ТелоЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацииПоОтправлению(ЗаказПокупател)

// <Описание функции>
//
// Параметры:
//  ЗаказПокупателя  - ДокументСсылка.ЗаказПокупател - по заказу получаем номер отправления
// Возвращаемое значение:
//   ТекстВФорматеJSON   - Этот текст передаем в API OZON
//
Функция ПолучитьТекстЗапросаСборкиСпорныхЗаказовСOZON(ЗаказПокупателя)
	
	//В OZON предполагается что заказ может дробиться на несколько отправлений
	//В нашем случае это пока не предусмотрено
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	OZON_ДанныеПоЗаказам.posting_number КАК posting_number
		|ИЗ
		|	РегистрСведений.OZON_ДанныеПоЗаказам КАК OZON_ДанныеПоЗаказам
		|ГДЕ
		|	OZON_ДанныеПоЗаказам.ЗаказПокупателя = &ЗаказПокупателя
		|	И OZON_ДанныеПоЗаказам.status = ""arbitration""";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ТелоЗапроса = " 
			|{
			|  ""posting_number"": 
			|    [
			|		""" + РезультатЗапроса.posting_number + """
			|    ]
			|}";
	Иначе
		ТелоЗапроса = "";
	КонецЕсли;
	
	Возврат ТелоЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацииПоОтправлению(ЗаказПокупател)

// <Описание функции>
//
// Параметры:
//  ЗаказПокупателя  - ДокументСсылка.ЗаказПокупател - по заказу получаем номер отправления
// Возвращаемое значение:
//   ТекстВФорматеJSON   - Этот текст передаем в API OZON
//
Функция ПолучитьТекстЗапросаОткрытьСпорПоОтправлениюСOZON(ЗаказПокупателя)
	
	//В OZON предполагается что заказ может дробиться на несколько отправлений
	//В нашем случае это пока не предусмотрено
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	OZON_ДанныеПоЗаказам.posting_number КАК posting_number
		|ИЗ
		|	РегистрСведений.OZON_ДанныеПоЗаказам КАК OZON_ДанныеПоЗаказам
		|ГДЕ
		|	OZON_ДанныеПоЗаказам.ЗаказПокупателя = &ЗаказПокупателя
		|	И OZON_ДанныеПоЗаказам.status = ""not_accepted""";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ТелоЗапроса = " 
			|{
			|  ""posting_number"": 
			|    [
			|		""" + РезультатЗапроса.posting_number + """
			|    ]
			|}";
	Иначе
		ТелоЗапроса = "";
	КонецЕсли;
	
	Возврат ТелоЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацииПоОтправлению(ЗаказПокупател)

Функция ПолучитьТекстЗапросаОтменыЗаказаOZON(ЗаказПокупателя, КодОтмены, ПричинаОтмены)
	
	//В OZON предполагается что заказ может дробиться на несколько отправлений
	//В нашем случае это пока не предусмотрено
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	OZON_ДанныеПоЗаказам.posting_number КАК posting_number
		|ИЗ
		|	РегистрСведений.OZON_ДанныеПоЗаказам КАК OZON_ДанныеПоЗаказам
		|ГДЕ
		|	OZON_ДанныеПоЗаказам.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ТелоЗапроса =
			"{
			|  ""cancel_reason_id"": " + КодОтмены + ",
			|  ""cancel_reason_message"": """ + ПричинаОтмены + """,
			|  ""posting_number"": """ + РезультатЗапроса.posting_number + """
			|}";
	Иначе
		ТелоЗапроса = "";
	КонецЕсли;
	
	Возврат ТелоЗапроса;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  ЗаказПокупателя  - ДокументСсылка.ЗаказПокупател - по заказу получаем номер отправления
// Возвращаемое значение:
//   ТекстВФорматеJSON   - Этот текст передаем в API OZON
//
Функция ПолучитьТекстЗапросаПечатиМаркировкиЗаказаOZON(ЗаказПокупателя)
	
	//В OZON предполагается что заказ может дробиться на несколько отправлений
	//В нашем случае это пока не предусмотрено
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	OZON_ДанныеПоЗаказам.posting_number КАК posting_number
		|ИЗ
		|	РегистрСведений.OZON_ДанныеПоЗаказам КАК OZON_ДанныеПоЗаказам
		|ГДЕ
		|	OZON_ДанныеПоЗаказам.ЗаказПокупателя = &ЗаказПокупателя";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ТелоЗапроса =
			"{
			|""posting_number"": 
			|	[
			|	""" + РезультатЗапроса.posting_number + """
			|	]
			|}";
	Иначе
		ТелоЗапроса = "";
	КонецЕсли;
	
	Возврат ТелоЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаИнформацииПоОтправлению(ЗаказПокупател)

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеПоЗаказамOZON(Ресурс, ТелоЗапроса, ВидОперации = "")
	
	Данные = Неопределено;
	
	Если ПустаяСтрока(ТелоЗапроса) Тогда
		ТекстСообщения = "";
		Если ВидОперации = "ПолучитьИнформациюОбОтправленииСOZON" Тогда
			ТекстСообщения = "Не найден номер отправления по текущему заказу. Возможно этот заказ был создан вручную, а не загружен с OZON";
		ИначеЕсли ВидОперации = "ВыполнитьСборкуOZON" Тогда
			ТекстСообщения = "Не найден номер отправления по текущему заказу. Либо статус заказа отличный от статуса ""Ожидает сборки""";
		ИначеЕсли ВидОперации = "ОткрытьСпорПоОтправлениюСOZON" Тогда
			ТекстСообщения = "Не найден номер отправления по текущему заказу. Либо статус заказа отличный от статуса ""Не принят на пункте сортировки""";
		КонецЕсли;
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецЕсли
		
		Возврат Данные;
	КонецЕсли;
	
	ПараметрыПодключения = ПолучитьПараметрыПодключенияOZON();
	
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	
	Запрос = Новый HTTPЗапрос(Ресурс, ПараметрыПодключения);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	КоличествоПопыток = 2;
	ЕстьОшибкаПриОбработке = Истина;
	Для НомерПопытки = 1 По КоличествоПопыток цикл
		
		Попытка
			
			Соединение = Новый HTTPСоединение(ПараметрыПодключения.Получить("Host"));
			httpОтвет = Соединение.ОтправитьДляОбработки(Запрос, ФайлРезультата);
			
			Ответ = Новый ТекстовыйДокумент();
			Ответ.Прочитать(ФайлРезультата, КодировкаТекста.UTF8);
			ТекстОтвета = Ответ.ПолучитьТекст();
			ЕстьОшибкаПриОбработке = ЕстьОшибкаПриОбработке(httpОтвет);
			Если ЕстьОшибкаПриОбработке Тогда
				ВызватьИсключение "ошибка";
			КонецЕсли;
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
			
			Данные = ПрочитатьJSON(ЧтениеJSON, Ложь);
			
			СоединениеУспешно = Истина;
			
		Исключение
			Если КоличествоПопыток = 2 Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ОписаниеОшибки();
				Сообщение.Сообщить();
				Возврат Данные;
			КонецЕсли;
			
		КонецПопытки;
		
		Если НЕ ЕстьОшибкаПриОбработке Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Данные.Свойство("error") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Данные.error.code + символы.ПС + Данные.error.message;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Данные.Свойство("result") Тогда
		
		Если типзнч(Данные.result) = тип("Массив") Тогда
			Если Данные.result.Количество() = 0 Тогда
				ТекстСообщения = "Данных по текущему отправлению (" + ТелоЗапроса + ") не найдено на сайте OZON";
			КонецЕсли;
		ИначеЕсли типзнч(Данные.result) = тип("Булево") Тогда
			Если Данные.result = ложь Тогда
				ТекстСообщения = "Возникла ошибка при обработке в личном кабинете OZON, попробуйте выполнить операцию еще раз или обратитесь к программисту";
			КонецЕсли;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
	КонецЕсли;
	
	УдалитьФайлы(ФайлРезультата);
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьТекущийСтатусЗаказаOZON(ЗаказПокупателя)
	
	ТекущийСтатус = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	OZON_ДанныеПоЗаказам.status КАК status
		|ИЗ
		|	РегистрСведений.OZON_ДанныеПоЗаказам КАК OZON_ДанныеПоЗаказам
		|ГДЕ
		|	OZON_ДанныеПоЗаказам.ЗаказПокупателя = &ЗаказПокупателя
		|
		|СГРУППИРОВАТЬ ПО
		|	OZON_ДанныеПоЗаказам.status";
	
	Запрос.УстановитьПараметр("ЗаказПокупателя", ЗаказПокупателя);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ТекущийСтатус = РезультатЗапроса.status;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

Процедура СопоставитьИЗаписатьЗаказы(ДатаНачала, ДатаОкончания, ДанныеЗаказа)
	
	ДатаЗаказа = ПолучитьДатуИзСтроки(ДанныеЗаказа.created_at);
	///////////////////////////////////////////////////////////////////////////////
	//
	// Собственно делаем заказ
	
	ЗаказПокупателя = ВыполнитьПоискЗаказаПокупателя(ДатаНачала, ДатаОкончания, ДанныеЗаказа.posting_number);
	
	Если ЗаказПокупателя.Пустая() Тогда
		мДокЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
		мДокЗаказ.Дата = ДатаЗаказа;
		мДокЗаказ.ДатаДоставки = ПолучитьДатуИзСтроки(ДанныеЗаказа.shipment_date);
		мДокЗаказ.ВремяДоставкиС = ПолучитьДатуИзСтроки(ДанныеЗаказа.shipment_date);
		мДокЗаказ.ВремяДоставкиДо = ПолучитьДатуИзСтроки(ДанныеЗаказа.shipment_date);
		мДокЗаказ.НомерОтправленияВСистемеКурьерскойСлужбы = ДанныеЗаказа.posting_number;
		мДокЗаказ.УстановитьНовыйНомер("ИМ");
		мДокЗаказ.Склад = Предопределенные.СкладИМ_Москва();
		мДокЗаказ.СтатусЗаказа = Перечисления.СтатусыЗаказаПокупателя.Новый;
		мДокЗаказ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		мДокЗаказ.Комментарий = "#Загружен автоматически с сайта ozon.ru " + ТекущаяДата();
		мДокЗаказ.ФормаОплатыЗаказПокупателя_Шапка = Перечисления.ФормаОплаты.безнал;
		мДокЗаказ.СлужбаДоставки = КонтрагентОзон;
		мДокЗаказ.СпособДоставки = Перечисления.СпособыДоставкиЗаказаПокупателя.КурьерскойСлужбой;
		мДокЗаказ.Покупатель = ПокупательОзон;
		мДокЗаказ.ФИОПокупателя = ПокупательОзон.Наименование;
		мДокЗаказ.МестоСозданияЗаказа = Перечисления.МестаСозданияЗаказаПокупателя.OZON;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(ПОДСТРОКА(КонтактнаяИнформация.Телефон, 1, 200)) КАК Телефон,
			|	МАКСИМУМ(ПОДСТРОКА(КонтактнаяИнформация.ЭлектронныйАдресПокупателя, 1, 200)) КАК ЭлектронныйАдресПокупателя
			|ИЗ
			|	(ВЫБРАТЬ
			|		"""" КАК Телефон,
			|		"""" КАК ЭлектронныйАдресПокупателя
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		КонтактнаяИнформация.Представление,
			|		""""
			|	ИЗ
			|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|	ГДЕ
			|		КонтактнаяИнформация.Объект = &Объект
			|		И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|		И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонПокупателяМобильный)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		"""",
			|		КонтактнаяИнформация.Представление
			|	ИЗ
			|		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|	ГДЕ
			|		КонтактнаяИнформация.Объект = &Объект
			|		И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|		И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЭлектронныйАдресПокупателя)) КАК КонтактнаяИнформация";
		
		Запрос.УстановитьПараметр("Объект", мДокЗаказ.Покупатель);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			мДокЗаказ.Телефон = Выборка.Телефон;
			мДокЗаказ.ЭлектронныйАдрес = Выборка.ЭлектронныйАдресПокупателя;
		КонецЦикла;
		
		///////////////////////////////////////////////////////////////////////////////
		// Адрес пункта выдачи
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Поле1,
			|	КонтактнаяИнформация.Поле2,
			|	КонтактнаяИнформация.Поле3,
			|	КонтактнаяИнформация.Поле4,
			|	КонтактнаяИнформация.Поле5,
			|	КонтактнаяИнформация.Поле6,
			|	КонтактнаяИнформация.Поле7,
			|	КонтактнаяИнформация.Поле8,
			|	КонтактнаяИнформация.Поле9
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
			|	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресКонтрагентаПочтовый)";
		
		Запрос.УстановитьПараметр("Объект", КонтрагентОзон);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(мДокЗаказ, Выборка);
			мДокЗаказ.ПредставлениеАдреса = УниверсальныеМеханизмы.ПолучитьПредставлениеАдреса(мДокЗаказ);
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////
		// Табличная часть
		
		Для каждого СтрокаТовар из ДанныеЗаказа.products цикл
			
			Товар = ВыполнитьПоискНоменклатуры(СтрокаТовар);
			мСтрокаТовары = мДокЗаказ.Товары.Добавить();
			мСтрокаТовары.Номенклатура = Товар;
			Артикул = мСтрокаТовары.Номенклатура.Артикул;
			мСтрокаТовары.Вес = Артикул.Вес;
			мСтрокаТовары.ДлинаКоробки = Артикул.Длина;
			мСтрокаТовары.ШиринаКоробки = Артикул.Ширина;
			мСтрокаТовары.ВысотаКоробки = Артикул.Высота;
			
			мСтрокаТовары.СтатусЗаказа = Перечисления.СтатусыЗаказаПокупателя.Новый;
			мСтрокаТовары.Количество = 1;
			
			ТекущийИдентификатор = Документы.ЗаказПокупателя.СформироватьИдентификаторЗаказа(мДокЗаказ);
			мСтрокаТовары.ИдентификаторЗаказа = ТекущийИдентификатор;
			
		КонецЦикла;
		
		мДокЗаказ.Записать();
		ЗаказПокупателя = мДокЗаказ.Ссылка;
	КонецЕсли;
	
	ЗаполнитьДанныеПоЗаказуOZON(ЗаказПокупателя, ДанныеЗаказа);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоЗаказуOZON(ЗаказПокупателя, ДанныеЗаказа)
	
	НачатьТранзакцию();
	
	НаборЗаписей = РегистрыСведений.OZON_ДанныеПоЗаказам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказПокупателя.Установить(ЗаказПокупателя);
	НаборЗаписей.Записать();
	
	Для каждого СтрокаТовар из ДанныеЗаказа.products цикл
		МенеджерЗаписиДанныеЗаказа = РегистрыСведений.OZON_ДанныеПоЗаказам.СоздатьМенеджерЗаписи();
		МенеджерЗаписиДанныеЗаказа.ЗаказПокупателя = ЗаказПокупателя;
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиДанныеЗаказа, ДанныеЗаказа, , "created_at, in_process_at, shipment_date");
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиДанныеЗаказа, СтрокаТовар);
		
		МенеджерЗаписиДанныеЗаказа.created_at = ПолучитьДатуИзСтроки(ДанныеЗаказа.created_at);
		МенеджерЗаписиДанныеЗаказа.in_process_at = ПолучитьДатуИзСтроки(ДанныеЗаказа.in_process_at);
		МенеджерЗаписиДанныеЗаказа.shipment_date = ПолучитьДатуИзСтроки(ДанныеЗаказа.shipment_date);
		МенеджерЗаписиДанныеЗаказа.Записать(Истина);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьПараметрыПодключенияOZON()
	
	ЭтоРабочаяБаза = ОбщегоНазначения.ТекущаяБазаДанныхЯвляетсяРабочей();
	
	Если ТестовыйЗапуск И НЕ ЭтоРабочаяБаза Тогда
		Host = "cb-api.ozonru.me";
		ClientId = "836";
		ApiKey = "0296d4f2-70a1-4c09-b507-904fd05567b9";
		ContentType = "application/json";
	Иначе
		Host = "api-seller.ozon.ru";
		ClientId = "<Client-Id>";
		ApiKey = "<Api-Key>";
		ContentType = "application/json";
	КонецЕсли;
	
	ПараметрыПодключения = Новый Соответствие;
	ПараметрыПодключения.Вставить("Host", Host);
	ПараметрыПодключения.Вставить("Client-Id", ClientId);
	ПараметрыПодключения.Вставить("Api-Key", ApiKey);
	ПараметрыПодключения.Вставить("Content-Type", ContentType);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ВыполнитьПоискНоменклатуры(СтрокаТовар)
	
	//TODO Исправить запрос, в идеале он временно, потому удалить
	Запрос = Новый Запрос;
	Запрос.Текст = "ГруппыНоменклатуры.Группа ИЗ Справочник.ГруппыНоменклатуры КАК ГруппыНоменклатуры ГДЕ Код = &Код";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	  ТекущаяГруппаНоменклатуры = Выборка.Группа;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", СтрокаТовар.offer_id);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	ЭтоРабочаяБаза = ОбщегоНазначения.ТекущаяБазаДанныхЯвляетсяРабочей();
	
	Если РезультатЗапроса.Следующий() Тогда
		НоменклатураСсылка = РезультатЗапроса.Ссылка;
	Иначе
		Если ТестовыйЗапуск И НЕ ЭтоРабочаяБаза Тогда
			ГруппаСсылка = Справочники.Номенклатура.НайтиПоНаименованию("OZON");
			Если ГруппаСсылка.Пустая() Тогда
				ГруппаОбъект = Справочники.Номенклатура.СоздатьГруппу();
				ГруппаОбъект.Наименование = "OZON";
				ГруппаОбъект.Записать();
				ГруппаСсылка = ГруппаОбъект.Ссылка;
			КонецЕсли;
			
			НоменклатураСсылка = Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТовар.Name);
			Если НоменклатураСсылка.Пустая() Тогда
				НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
				//НоменклатураОбъект.Код = СтрокаТовар.offer_id;
				НоменклатураОбъект.Наименование = СтрокаТовар.name;
				НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
				НоменклатураОбъект.Записать();
				НоменклатураСсылка = НоменклатураОбъект.Ссылка;
			КонецЕсли;
		Иначе
			НоменклатураСсылка = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат НоменклатураСсылка;
	
КонецФункции

Функция ВыполнитьПоискЗаказаПокупателя(ДатаНачала, ДатаОкончания, posting_number)
	
	ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.НомерОтправленияВСистемеКурьерскойСлужбы = &НомерОтправленияВСистемеКурьерскойСлужбы
		|	И ЗаказПокупателя.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ЗаказПокупателя.Покупатель = &Покупатель
		|	И ЗаказПокупателя.СлужбаДоставки = &СлужбаДоставки";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("НомерОтправленияВСистемеКурьерскойСлужбы", posting_number);
	Запрос.УстановитьПараметр("Покупатель", ПокупательОзон);
	Запрос.УстановитьПараметр("СлужбаДоставки", КонтрагентОзон);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ЗаказПокупателя = РезультатЗапроса.Ссылка;
	КонецЕсли;
	
	Возврат ЗаказПокупателя;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Стр)
	
	МассивСтрок = СтрРазделить(Стр, "T");
	ДатаСтрокой = МассивСтрок[0];
	ВремяСтрокой = МассивСтрок[1];
	
	МассивСтрокДата = СтрРазделить(ДатаСтрокой, "-");
	МассивСтрокВремя = СтрРазделить(ВремяСтрокой, ":");
	
	Год = МассивСтрокДата[0];
	Месяц = МассивСтрокДата[1];
	День = МассивСтрокДата[2];
	Час = МассивСтрокВремя[0];
	Минута = МассивСтрокВремя[1];
	
	ПолученнаяДата = Дата(Год, Месяц, День, Час, Минута, 0);
	
	Возврат ПолученнаяДата;
	
КонецФункции

Функция ЕстьОшибкаПриОбработке(ТекстОтвета)
	
	ЕстьОшибка = Ложь;
	Если ТекстОтвета.КодСостояния <> 200 Тогда
		Сообщить("Данные не получены, код ответа сервера: " + ТекстОтвета.КодСостояния);
		ЕстьОшибка = Истина;
	КонецЕсли;
	
	Возврат ЕстьОшибка;
	
КонецФункции

#КонецОбласти


КонтрагентОзон = Справочники.Контрагенты.НайтиПоНаименованию("OZON");
ПокупательОзон = Справочники.Покупатели.НайтиПоНаименованию("OZON");
ДатаНачала = ТекущаяДатаСеанса() - 30 * 24 * 60 * 60;
ДатаОкончания = КонецГода(ТекущаяДатаСеанса());